From 20b10e8a893f951baf1c9cbef30685f746f532cd Mon Sep 17 00:00:00 2001
From: Michael Simacek <msimacek@redhat.com>
Date: Tue, 5 Jan 2016 12:35:22 +0100
Subject: [PATCH 3/3] Add testcases for JPEG codec

---
 .../codec/tiff/TIFFImageDecoderTest.java           | 52 ++++++++++++++++++++++
 .../image/writer/internal/JPEGImageWriterTest.java | 48 ++++++++++++++++++++
 2 files changed, 100 insertions(+)
 create mode 100644 test/java/org/apache/xmlgraphics/codec/tiff/TIFFImageDecoderTest.java
 create mode 100644 test/java/org/apache/xmlgraphics/image/writer/internal/JPEGImageWriterTest.java

diff --git a/test/java/org/apache/xmlgraphics/codec/tiff/TIFFImageDecoderTest.java b/test/java/org/apache/xmlgraphics/codec/tiff/TIFFImageDecoderTest.java
new file mode 100644
index 0000000..22e71e3
--- /dev/null
+++ b/test/java/org/apache/xmlgraphics/codec/tiff/TIFFImageDecoderTest.java
@@ -0,0 +1,52 @@
+package org.apache.xmlgraphics.codec.tiff;
+
+import java.awt.image.Raster;
+import java.io.ByteArrayInputStream;
+
+import javax.imageio.ImageIO;
+
+import org.apache.xmlgraphics.image.codec.tiff.TIFFImageDecoder;
+import org.apache.xmlgraphics.image.loader.util.SeekableStreamAdapter;
+
+import junit.framework.TestCase;
+
+public class TIFFImageDecoderTest extends TestCase {
+    public void testTIFFReading() throws Exception {
+        byte[] data = new byte[] { 73, 73, 42, 0, 52, 0, 0, 0, (byte) 255, (byte) 216, (byte) 255, (byte) 192, 0, 17, 8,
+                0, 1, 0, 1, 3, 82, 17, 0, 71, 17, 0, 66, 17, 0, (byte) 255, (byte) 218, 0, 12, 3, 82, 0, 71, 0, 66, 0,
+                0, 63, 0, (byte) 247, (byte) 250, (byte) 247, (byte) 250, (byte) 247, (byte) 250, (byte) 255,
+                (byte) 217, 0, 17, 0, (byte) 254, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 1, 0, 0, 0, 1, 0, 0, 0,
+                1, 1, 3, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 1, 3, 0, 3, 0, 0, 0, 22, 1, 0, 0, 3, 1, 3, 0, 1, 0, 0, 0, 7, 0,
+                0, 0, 6, 1, 3, 0, 1, 0, 0, 0, 2, 0, 0, 0, 13, 1, 2, 0, 28, 0, 0, 0, 62, 2, 0, 0, 17, 1, 4, 0, 1, 0, 0,
+                0, 8, 0, 0, 0, 18, 1, 3, 0, 1, 0, 0, 0, 1, 0, 0, 0, 21, 1, 3, 0, 1, 0, 0, 0, 3, 0, 0, 0, 22, 1, 3, 0, 1,
+                0, 0, 0, 64, 0, 0, 0, 23, 1, 4, 0, 1, 0, 0, 0, 43, 0, 0, 0, 26, 1, 5, 0, 1, 0, 0, 0, 6, 1, 0, 0, 27, 1,
+                5, 0, 1, 0, 0, 0, 14, 1, 0, 0, 28, 1, 3, 0, 1, 0, 0, 0, 1, 0, 0, 0, 40, 1, 3, 0, 1, 0, 0, 0, 2, 0, 0, 0,
+                91, 1, 7, 0, 33, 1, 0, 0, 28, 1, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 1, 0, 0, 0, 72, 0, 0, 0, 1, 0, 0, 0, 8,
+                0, 8, 0, 8, 0, (byte) 255, (byte) 216, (byte) 255, (byte) 219, 0, 67, 0, 8, 6, 6, 7, 6, 5, 8, 7, 7, 7,
+                9, 9, 8, 10, 12, 20, 13, 12, 11, 11, 12, 25, 18, 19, 15, 20, 29, 26, 31, 30, 29, 26, 28, 28, 32, 36, 46,
+                39, 32, 34, 44, 35, 28, 28, 40, 55, 41, 44, 48, 49, 52, 52, 52, 31, 39, 57, 61, 56, 50, 60, 46, 51, 52,
+                50, (byte) 255, (byte) 196, 0, 31, 0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5,
+                6, 7, 8, 9, 10, 11, (byte) 255, (byte) 196, 0, (byte) 181, 16, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0,
+                1, 125, 1, 2, 3, 0, 4, 17, 5, 18, 33, 49, 65, 6, 19, 81, 97, 7, 34, 113, 20, 50, (byte) 129, (byte) 145,
+                (byte) 161, 8, 35, 66, (byte) 177, (byte) 193, 21, 82, (byte) 209, (byte) 240, 36, 51, 98, 114,
+                (byte) 130, 9, 10, 22, 23, 24, 25, 26, 37, 38, 39, 40, 41, 42, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69,
+                70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116,
+                117, 118, 119, 120, 121, 122, (byte) 131, (byte) 132, (byte) 133, (byte) 134, (byte) 135, (byte) 136,
+                (byte) 137, (byte) 138, (byte) 146, (byte) 147, (byte) 148, (byte) 149, (byte) 150, (byte) 151,
+                (byte) 152, (byte) 153, (byte) 154, (byte) 162, (byte) 163, (byte) 164, (byte) 165, (byte) 166,
+                (byte) 167, (byte) 168, (byte) 169, (byte) 170, (byte) 178, (byte) 179, (byte) 180, (byte) 181,
+                (byte) 182, (byte) 183, (byte) 184, (byte) 185, (byte) 186, (byte) 194, (byte) 195, (byte) 196,
+                (byte) 197, (byte) 198, (byte) 199, (byte) 200, (byte) 201, (byte) 202, (byte) 210, (byte) 211,
+                (byte) 212, (byte) 213, (byte) 214, (byte) 215, (byte) 216, (byte) 217, (byte) 218, (byte) 225,
+                (byte) 226, (byte) 227, (byte) 228, (byte) 229, (byte) 230, (byte) 231, (byte) 232, (byte) 233,
+                (byte) 234, (byte) 241, (byte) 242, (byte) 243, (byte) 244, (byte) 245, (byte) 246, (byte) 247,
+                (byte) 248, (byte) 249, (byte) 250, (byte) 255, (byte) 217, 0, 120, 120, 120, 120, 120, 120, 120, 120,
+                120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 0, 10 };
+        ByteArrayInputStream in = new ByteArrayInputStream(data);
+        TIFFImageDecoder dec = new TIFFImageDecoder(new SeekableStreamAdapter(ImageIO.createImageInputStream(in)),
+                null);
+        Raster raster = dec.decodeAsRaster();
+        assertEquals(1, raster.getHeight());
+        assertEquals(1, raster.getWidth());
+    }
+}
diff --git a/test/java/org/apache/xmlgraphics/image/writer/internal/JPEGImageWriterTest.java b/test/java/org/apache/xmlgraphics/image/writer/internal/JPEGImageWriterTest.java
new file mode 100644
index 0000000..840d611
--- /dev/null
+++ b/test/java/org/apache/xmlgraphics/image/writer/internal/JPEGImageWriterTest.java
@@ -0,0 +1,48 @@
+package org.apache.xmlgraphics.image.writer.internal;
+
+import java.awt.image.BufferedImage;
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+
+import javax.imageio.ImageIO;
+import javax.imageio.ImageReader;
+import javax.imageio.stream.ImageInputStream;
+
+import org.apache.xmlgraphics.image.writer.ImageWriterParams;
+
+import junit.framework.TestCase;
+
+public class JPEGImageWriterTest extends TestCase {
+    private BufferedImage image;
+    private ByteArrayOutputStream out;
+    private JPEGImageWriter imageWriter;
+
+    public void setUp() {
+        out = new ByteArrayOutputStream();
+        imageWriter = new JPEGImageWriter();
+        image = new BufferedImage(200, 200, BufferedImage.TYPE_BYTE_GRAY);
+    }
+
+    public void testJPEGWriting() throws Exception {
+        imageWriter.writeImage(image, out);
+        assertCanReadBack();
+    }
+
+    public void testJPEGWritingQuality() throws Exception {
+
+        ImageWriterParams params = new ImageWriterParams();
+        params.setJPEGQuality(0.5f, false);
+        imageWriter.writeImage(image, out, params);
+        assertCanReadBack();
+    }
+
+    private void assertCanReadBack() throws Exception {
+        // try reading it back
+        ImageReader rdr = (ImageReader) ImageIO.getImageReadersByMIMEType("image/jpeg").next();
+        ImageInputStream is = ImageIO.createImageInputStream(new ByteArrayInputStream(out.toByteArray()));
+        rdr.setInput(is);
+        BufferedImage image2 = rdr.read(0);
+        assertEquals(200, image2.getHeight());
+        assertEquals(200, image2.getWidth());
+    }
+}
\ No newline at end of file
-- 
2.5.0

